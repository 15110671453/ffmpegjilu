今天看到一片文章 nginx 也是可以调试的

我现在研究phpstorm 开发php环境
 
 首先 用nginx调度 php-fpm 来解析php代码执行

 保证nginx 启动 php-fpm 启动

nginx的web服务的根目录 检查 php-fpm 检查其配置文件php-fpm.d文件夹下 看到www.conf中 php-fpm监听的是9000端口号

会与后面的xdebug扩展监听的端口号冲突

因此配置php时 在php.ini中 xdebug zend扩展的监听端口号 修改为9999 不要使用默认

那么服务器端的配置基本搞定

客户端phpstorm的配置

在prefrence -build -deployment下配置 一下 对应的servre环境 可能会影响到 built-in server 这里每次在代码中直接 open in browser 跑的就是这个配置的环境

在language php debug 下配置 端口号 与服务器一致 9999
DBGp proxy 配置 HOST localhost IDEKEY PHPSTORM 端口号 9999 与服务器一致


对于客户端MACGdbp 设置 也是 配置端口号 改为 9999

安装google浏览器 也需要为浏览器安装xdebug扩展 注意配置该扩展时选择的IDEKEY 如果想让调试内容在macgdbp中看到就需要 将IDEKEY设置为 macgdbp 如果想在phpstorm中看到就需要 设置为phpstorm

另外因为php引擎的 php.ini文件中 配置xdebug的端口号为 9999 所有要用到
该工具的客户端 在自己的配置文件中 debug 端口号都要改为9999 ；再者 phpstorm 与 macgdbp 都内置xdebug 的引擎 都在监听端口号9999 所以 不要同时开启；再者 php.ini 中要不要设置idekey 如果设置了 以后只能用一个开发工具来监听调试 



再者在phpstorm中使用调试时  先开启监听 然后在要设置断点的行设置断点

再运行debug 开始步步调试

macgdbp
-------------------补充 
补充 我们在PHPstorm中的调试 还有右键直接在浏览器打开 默认都是在 访问
phpstorm的内建服务器 而不是我们自己搭建的nginx的服务器调用的php服务

但是由于用的同一个php解释器 因此 在通过php-fpm（已经为了管理和监听php占用9000端口）启动php服务后，
 我们调试时 都是相同配置的php服务在为我们的代码执行服务，因此相同的一份
 php.ini文件就管理了xdebug的配置 影响着php-storm的xdebug能否监听调试成功
 ，也影响着macgdbp能否监听调试成功；而这两者要想成功需要各自配置自己监听xdebug
 服务的端口号与服务器一致 都是9999；

 phpstorm中
build - debug - deployment下
bebugger 配置的端口号就是 就是php-storm的内建built-in服务器的端口号
在php-storm中右键 open in browser 打开也是访问内建服务器该端口号 在进行调试；

deployment 配置 一键部署到 我们的 自己搭建的服务器的 服务目录下

language & frameworks
php 配置 php-storm 该工程要使用那个php解释器版本 和解释器所在路径

server 配置的 服务器  暂时 用不到 发现 这里 主要是 添加 自己的 个人服务器记录（非php-strom内建服务器）可以添加多条 你有几个服务器都可以
添加进来 这样的话 当我们要run应用时 可以在run 之前 edit configuration 
然后 选择自己真正要run的环境 ，但是 它 影响不了 在项目中 右键 open in browser
他永远是走的php-strom的内建服务器













